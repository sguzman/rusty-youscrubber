//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "payload")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub type_of: Option<String>,
    pub availability: Option<i32>,
    pub channel: String,
    pub channel_follower_count: Option<i32>,
    pub channel_id: String,
    pub channel_url: Option<String>,
    pub description: Option<String>,
    pub epoch: Option<DateTime>,
    pub extractor: Option<String>,
    pub extractor_key: Option<String>,
    pub payload_id: String,
    pub modified_date: Option<DateTime>,
    pub original_url: Option<String>,
    pub playlist_count: Option<i32>,
    pub release_year: Option<i32>,
    pub title: String,
    pub uploader: String,
    pub uploader_id: String,
    pub uploader_url: Option<String>,
    pub view_count: Option<i32>,
    pub webpage_url: Option<String>,
    pub webpage_url_basename: Option<String>,
    pub webpage_url_host: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::channelcategory::Entity")]
    Channelcategory,
    #[sea_orm(has_many = "super::channeltag::Entity")]
    Channeltag,
    #[sea_orm(has_many = "super::channelthumbnail::Entity")]
    Channelthumbnail,
    #[sea_orm(has_many = "super::version::Entity")]
    Version,
}

impl Related<super::channelcategory::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channelcategory.def()
    }
}

impl Related<super::channeltag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channeltag.def()
    }
}

impl Related<super::channelthumbnail::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channelthumbnail.def()
    }
}

impl Related<super::version::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Version.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
