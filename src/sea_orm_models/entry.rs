//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "entry")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub last_playlist_index: Option<i32>,
    pub has_drm: Option<i32>,
    #[sea_orm(column_type = "Double", nullable)]
    pub abr: Option<f64>,
    pub acodec: Option<String>,
    pub age_limit: Option<i32>,
    #[sea_orm(column_type = "Double", nullable)]
    pub aspect_ratio: Option<f64>,
    pub asr: Option<i32>,
    pub audio_channels: Option<i32>,
    pub availability: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub average_rating: Option<f64>,
    pub channel: Option<String>,
    pub channel_follower_count: Option<i32>,
    pub channel_id: Option<String>,
    pub channel_url: Option<String>,
    pub comment_count: Option<i32>,
    pub description: Option<String>,
    pub display_id: Option<String>,
    pub duration: Option<i32>,
    pub duration_string: Option<String>,
    pub dynamic_range: Option<String>,
    pub epoch: Option<DateTime>,
    pub ext: Option<String>,
    pub extractor: Option<String>,
    pub extractor_key: Option<String>,
    pub filesize: Option<i32>,
    pub format: Option<String>,
    pub format_id: Option<String>,
    pub format_note: Option<String>,
    pub fps: Option<i32>,
    pub fulltitle: Option<String>,
    pub height: Option<i32>,
    pub entry_id: Option<String>,
    pub is_live: Option<i32>,
    pub language: Option<String>,
    pub like_count: Option<i32>,
    pub live_status: Option<String>,
    pub n_entries: Option<i32>,
    pub original_url: Option<String>,
    pub playable_in_embed: Option<i32>,
    pub playlist: Option<String>,
    pub playlist_auto_number: Option<i32>,
    pub playlist_count: Option<i32>,
    pub playlist_id: Option<String>,
    pub playlist_index: Option<i32>,
    pub playlist_title: Option<String>,
    pub playlist_uploader: Option<String>,
    pub playlist_uploader_id: Option<String>,
    pub protocol: Option<String>,
    pub release_timestamp: Option<DateTime>,
    pub release_year: Option<i32>,
    pub resolution: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub stretched_ratio: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub tbr: Option<f64>,
    pub thumbnail: Option<String>,
    pub title: Option<String>,
    pub uploader_date: Option<DateTime>,
    pub uploader_id: Option<String>,
    pub uploader_url: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub vbr: Option<f64>,
    pub vcodec: Option<String>,
    pub view_count: Option<i32>,
    pub webpage_url: Option<String>,
    pub webpage_url_basename: Option<String>,
    pub webpage_url_domain: Option<String>,
    pub width: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::automaticcaptions::Entity")]
    Automaticcaptions,
    #[sea_orm(has_many = "super::chapter::Entity")]
    Chapter,
    #[sea_orm(has_many = "super::fragment::Entity")]
    Fragment,
    #[sea_orm(has_many = "super::heatmap::Entity")]
    Heatmap,
    #[sea_orm(has_many = "super::subtitle::Entity")]
    Subtitle,
    #[sea_orm(has_many = "super::subtitletype::Entity")]
    Subtitletype,
    #[sea_orm(has_many = "super::videocategory::Entity")]
    Videocategory,
    #[sea_orm(has_many = "super::videotag::Entity")]
    Videotag,
}

impl Related<super::automaticcaptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Automaticcaptions.def()
    }
}

impl Related<super::chapter::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chapter.def()
    }
}

impl Related<super::fragment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Fragment.def()
    }
}

impl Related<super::heatmap::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Heatmap.def()
    }
}

impl Related<super::subtitle::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subtitle.def()
    }
}

impl Related<super::subtitletype::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subtitletype.def()
    }
}

impl Related<super::videocategory::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Videocategory.def()
    }
}

impl Related<super::videotag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Videotag.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
